@page "/fetchOrderdetails"
@page "/fetchOrderdetails/{status}"
@using FranksDinerBlazor.Shared.Models
@using FranksDinerBlazor.Shared.Utilities
@using Newtonsoft.Json
@using FranksDinerBlazor.Shared.Constants
@inject HttpClient Http

<h1>Order Data</h1>
<div class="row">
    <div class="col-md-6">
        <a href='/Order/add' class="btn btn-primary" role="button">
            <i class="fas fa-Order-plus"></i>
            Add Order
        </a>
    </div>
    <div class="input-group col">
        <input type="number" class="form-control" placeholder="Search Order by table number"
               min="1" max="200"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterOrder" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (OrderList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>Table Number</th>
                <th>Items</th>
                <th>Status</th>
                <th>Restaurant Message</th>
                <th>Order Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Order in OrderList)
            {
                <tr>
                    <td>@Order.Id</td>
                    <td>@Order.TableNumber</td>
                    <td>@Order.Items</td>
                    <td>@Order.Status</td>
                    <td>@Order.Message</td>
                    <td>@Order.OrderDate</td>
                    <td>
                        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target='#confirm_@Order.Id' disabled="@(IsNotPending(Order.Status))">
                            Confirm
                        </button>
                        <button href='/Order/edit/@Order.Id' class="btn btn-outline-danger" type="button" data-bs-toggle="modal" data-bs-target='#reject_@Order.Id' disabled="@(IsNotPending(Order.Status))">
                            Reject
                        </button>
                        <a href='/Order/edit/@Order.Id' class="btn btn-sm btn-light" role="button">
                            Edit
                        </a>
                        <a href='/Order/delete/@Order.Id' class="btn btn-sm btn-light" role="button">
                            Delete
                        </a>

                        <!-- Confirm Modal -->
                        <div class="modal fade" id="confirm_@Order.Id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="exampleModalLabel">Confirm Order</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        Are you sure you want to confirm this order?
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        <button type="button" class="btn btn-primary" @onclick="(async () => await ConfirmOrder(Order.Id))" data-bs-dismiss="modal">Confirm</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Reject Modal -->
                        <div class="modal fade" id="reject_@Order.Id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="exampleModalLabel">Reject Order</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        Leave a message as to why the order is getting rejected                                       
                                            <div class="mb-3">                                              
                                                <label for="Message" class="form-label">Restaurant Message</label>
                                                <div class="col-md-4">
                                                <input type="text" class="form-control" @bind="@RejectMessage" @oninput="@((e) => { RejectMessage=(string)e.Value;})" />
                                                </div>
                                            </div>                                        
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        <button type="button" class="btn btn-primary" @onclick="(async () => await RejectOrder(Order.Id, RejectMessage))" data-bs-dismiss="modal">Confirm</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    [Parameter]
    public string? Status { get; set; }
    protected List<Order> OrderList = new();
    protected List<Order> searchOrderData = new();
    protected Order Order = new();
    protected string SearchString { get; set; } = string.Empty;
    private FranksTimer? timer;
    private string RejectMessage { get; set; } = string.Empty;
    protected override async Task OnParametersSetAsync()
    {
        await this.GetOrder();

        timer = new(5000);
        timer.TimerElapsed += this.OnTimeElapsed;
    }
    private async void OnTimeElapsed(object? sender, EventArgs e)
    {
        await this.GetOrder();
        // Update the UI
        await this.InvokeAsync(StateHasChanged);
    }
    protected async Task GetOrder()
    {
        OrderList = await Http.GetFromJsonAsync<List<Order>>("api/Order");

        if (!string.IsNullOrWhiteSpace(Status))
        {
            OrderList = OrderList
                .Where(x => x.Status == Status)
                .ToList();
        }

        searchOrderData = OrderList;
    }
    protected void FilterOrder()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            OrderList = searchOrderData
                .Where(x => x.TableNumber.ToString() == SearchString)
                .ToList();
        }
        else
        {
            OrderList = searchOrderData;
        }
    }
    protected void DeleteConfirm(int orderID)
    {
        Order = OrderList.FirstOrDefault(x => x.Id == orderID);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        OrderList = searchOrderData;
    }
    protected async Task ConfirmOrder(int orderID)
    {
        var order = await GetOrderById(orderID);
        order.Status = OrderStatus.Confirmed;

        await Http.PutAsJsonAsync("api/Order", order);
    }
    protected async Task RejectOrder(int orderID, string message)
    {
        var order = await GetOrderById(orderID);
        order.Status = OrderStatus.Rejected;
        order.Message = message;

        await Http.PutAsJsonAsync("api/Order", order);
    }
    private async Task<Order?> GetOrderById(int orderID)
    {
        var orderContent = await (await Http.GetAsync("api/Order/" + orderID)).Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<Order>(orderContent);
    }
    private bool IsNotPending(string orderStatus){
        return orderStatus != OrderStatus.Pending;
    }
}